//Works online on linux systems, needs the stty file/thingy
//Setting a high score works, game only currently ends on high score.
//How to die? Thinking moving obstacles, and maybe more items.
//Health? Items like D for defense, take less dmg like 2 hits to kill. 
//H health pack O stays points, new levels at some point, can't go 
//thru walls. Maybe can shoot bullets at some point, or with items



#include<stdio.h>
#include<stdlib.h>
#include<time.h>

struct user{
  int health;
  int score;
  int spot[2];
  int itemSpot[2];
  int bWidth;
  int bHeight;
  int enemySpot[2];
};

struct user printBoard(struct user player);
int checkScore();
void updateHiScore(int score);
int dmg(int health);



int main(void){
  srand(time(0));
  
  struct user player;
  player.score = 0;
  player.health = 2;
  player.spot[0] = 1;
  player.spot[1] = 1;
  player.bWidth = 55;
  player.bHeight= 35;
  player.enemySpot[0] = 15;
  player.enemySpot[1] = 15;
  player.itemSpot[0] =(player.bHeight/2);
  player.itemSpot[1] = (player.bWidth/2);

  
  int c;
  /*int bWidth = 55;
  int bHeight = 35;
  int spot[2] = {1,1};
  int enemySpot[2] = {15,15};
  int itemSpot[] = {bHeight/2, bWidth/2};
  int score = 0;
  */
  /* use system call to make terminal send all keystrokes directly to stdin */
  printBoard(player);
  while(1)
  {
    system ("/bin/stty raw");
    c=getchar();
      /* type a period to break out of the loop, since CTRL-D won't work raw */
     do
     { 
      if(c == 'w')
      {
        player.spot[0]--;
      }
      else if (c == 's')
      {
        player.spot[0]++;
      }
      else if( c == 'd')
      {
        player.spot[1]++;
      }
      else if( c == 'a')
      {
        player.spot[1]--;
      }
    }while(c!= '.' && c!= 'w' && c!= 's' && c != 'd' && c!= 'a');

    /* use system call to set terminal behaviour to more normal behaviour */
    system ("/bin/stty cooked");
    printf("\n");
    int hiScore = checkScore();

    printf("SCORE: %d", player.score);

    //right aligning hiScore
    int hiScoreLeng = 0;
    int temp = hiScore;
    for (int i = 0; temp > 0; i++)
    {
      temp/=10;
      hiScoreLeng++;
    }
    int scoreLeng = 0;
    temp = player.score;
    for (; temp > 0; scoreLeng++)
    {
      temp/=10;
    }
    int startSpaces = 6+scoreLeng;//should be total characters from leftside

    //loop for spaces b/w end of score and start of hiScore
    for(int i = 1; startSpaces+i < (player.bWidth-hiScoreLeng-11); i++)
    {
      printf(" ");
    }
    printf("HIGHSCORE: %d\nHEALTH: %d\n", hiScore,player.health);

    player = printBoard(player);
    if(player.score == hiScore + 100)
    {
      printf("NEW HIGH SCORE!!!\n\n");
    }
    if (player.score == hiScore + 100)
    {
      printf("Game Over! You win\n\nNew High Score:");
      printf(" %d\n", player.score);
      updateHiScore(player.score);
      printf("\nEnter key to exit\n");
      getchar();
      break;
    }
    if (player.health == 0)
    {
      printf("You have died\n");
      break;
    }
  }

  return 0;
}


struct user printBoard(struct user player)
{
  int enemyMove = rand() % 9 +1;
  
  switch (enemyMove)
  {
    case 1:
      player.enemySpot[0]-= 1; 
      player.enemySpot[1]-= 1;
      if(player.enemySpot[0] == 0)
      {
        player.enemySpot[0] = player.bHeight-1;
      }
      if(player.enemySpot[1] == 0)
      {
        player.enemySpot[1] = player.bWidth-1;
      }
      break;
    case 2:
      player.enemySpot[0]-= 1; 
      if(player.enemySpot[0] == 0)
      {
        player.enemySpot[0] = player.bHeight-1;
      }
      break;
    case 3:
      player.enemySpot[0]-= 1; 
      player.enemySpot[1]+= 1;
      if(player.enemySpot[0] == 0)
      {
        player.enemySpot[0] = player.bHeight-1;
      }
      if(player.enemySpot[1] == player.bWidth)
      {
        player.enemySpot[1] = 1;
      }
      break;
    case 4: 
      player.enemySpot[1]-= 1;

      if(player.enemySpot[1] == 0)
      {
        player.enemySpot[1] = player.bWidth-1;
      }
      break;
    case 5:
      break;
    case 6: 
      player.enemySpot[1]+= 1;
      if(player.enemySpot[1] == player.bWidth)
      {
        player.enemySpot[1] = player.bWidth-1;
      }
      break;
    case 7:
      player.enemySpot[0]+= 1; 
      player.enemySpot[1]-= 1;
      if(player.enemySpot[0] == player.bHeight)
      {
        player.enemySpot[0] = 1;
      }
      if(player.enemySpot[1] == 0)
      {
        player.enemySpot[1] = player.bWidth-1;
      }
      break;
    case 8:
      player.enemySpot[0]+= 1; 
      if(player.enemySpot[0] == player.bHeight)
      {
        player.enemySpot[0] = 1;
      }
      break;
    case 9:
      player.enemySpot[0]+= 1; 
      player.enemySpot[1]+= 1;
      if(player.enemySpot[0] == player.bHeight)
      {
        player.enemySpot[0] = 1;
      }
      if(player.enemySpot[1] == player.bWidth)
      {
        player.enemySpot[1] = 1;
      }
      break;
    default:
      break;
  }

  if(player.spot[0] <= 0)
  {
    player.spot[0] = player.bHeight-1;
  }
  if (player.spot[0] == player.bHeight)
  {
    player.spot[0] = 1;
  }
  if(player.spot[1] <= 0)
  {
    player.spot[1] = player.bWidth-1;
  }
  if (player.spot[1] == player.bWidth)
  {
    player.spot[1] = 1;
  }
  for (int i = 0; i <= player.bHeight; i++)
  {
    if(i == 0 || i == player.bHeight)
    {
      for(int j = 0; j <= player.bWidth; j++)
      {
        printf("-");
      }
    }
    else
    {
      for(int j = 0; j<=player.bWidth; j++)
      {
        if(j == 0 || j  == player.bWidth)
        {
          printf("|");
        }
        else
        {
          if(player.spot[0]==player.itemSpot[0] && player.spot[1] == player.itemSpot[1])
          {
            printf("\a");
            player.score+=100;
            int randy = rand() % player.bWidth +1;
            int randy2 = rand() % player.bHeight +1;
            player.itemSpot[0]+=randy2;
            player.itemSpot[1]+=randy;
            if(player.itemSpot[0] >= player.bHeight)
            {
              player.itemSpot[0]-=player.bHeight-1;
            }
            if(player.itemSpot[1] >= player.bWidth)
            {
              player.itemSpot[1]-=player.bWidth-1;
            }
          }
          if(player.enemySpot[0]==player.spot[0] && player.enemySpot[1]==player.spot[1])
          {
            player.health = dmg(player.health);
            player.spot[0] = 1;
            player.spot[1] = 1;
          }
          if(i == player.spot[0] && j == player.spot[1])
          {
            printf("\033[1;34m");
            printf("*");
            printf("\033[0m");
            continue;
          }
          if(i ==player.enemySpot[0] && j == player.enemySpot[1])
          {
            printf("\033[1;33m");
            printf("M");
            printf("\33[0m");
            continue;
          }
          if(i == player.itemSpot[0] && j == player.itemSpot[1])
          {
            printf("O");
          }
          else
          {
            printf(" ");
          }
        }
      }
    }
    printf("\n");
  }
  return player;
  // loop below just makes asterisk keep moving left to right, top to bottom
  /*spot[1]++;
  if(spot[1] == bWidth)
  {
    spot[1] = 1;
    spot[0]++;
  }
  if(spot[0] == bHeight)
  {
    spot[0] = 1;
  }
  printf("%d & %d\n", spot[0], spot[1]);*/
}

int checkScore()
{
  FILE *ptr;
  ptr = fopen("hiScore.txt", "r");
  int hiScore = 0;
  if( ptr == NULL)
  {
    return hiScore;
  }

  fscanf(ptr, "%d", &hiScore);
  fclose(ptr);
  return hiScore;
}

void updateHiScore(int score)
{
  FILE *ptr; 
  ptr = fopen("hiScore.txt", "w");
  fprintf(ptr, "%d", score);

  fclose(ptr);
}

int dmg(int health)
{
  health = health -1;
  return health;
}
