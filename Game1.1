//Works online on linux systems, needs the stty file/thingy
//Setting a high score works, game only currently ends on high score.
//How to die? Thinking moving obstacles, and maybe more items.
//Health? Items like D for defense, take less dmg like 2 hits to kill. 
//H health pack O stays points, new levels at some point, can't go 
//thru walls. Maybe can shoot bullets at some point, or with items


#include<stdio.h>
#include<stdlib.h>
#include<time.h>

int printBoard(int spot[], int itemSpot[], int score, int bWidth, int bHeight);
int checkScore();
void updateHiScore(int score);

int main(void){
  srand(time(0));
  int c;
  int bWidth = 55;
  int bHeight = 35;
  int spot[2] = {1,1};
  int itemSpot[] = {bHeight/2, bWidth/2};
  int score = 0;
  /* use system call to make terminal send all keystrokes directly to stdin */
  printBoard(spot,itemSpot,score,bWidth,bHeight);
  while(1)
  {
    system ("/bin/stty raw");
    c=getchar();
      /* type a period to break out of the loop, since CTRL-D won't work raw */
     do
     { 
      if(c == 'w')
      {
        spot[0]--;
      }
      else if (c == 's')
      {
        spot[0]++;
      }
      else if( c == 'd')
      {
        spot[1]++;
      }
      else if( c == 'a')
      {
        spot[1]--;
      }
    }while(c!= '.' && c!= 'w' && c!= 's' && c != 'd' && c!= 'a');

    /* use system call to set terminal behaviour to more normal behaviour */
    system ("/bin/stty cooked");
    printf("\n");
    int hiScore = checkScore();

    printf("SCORE: %d", score);

    //right aligning hiScore
    int hiScoreLeng = 0;
    int temp = hiScore;
    for (int i = 0; temp > 0; i++)
    {
      temp/=10;
      hiScoreLeng++;
    }
    int scoreLeng = 0;
    temp = score;
    for (; temp > 0; scoreLeng++)
    {
      temp/=10;
    }
    int startSpaces = 6+scoreLeng;//should be total characters from leftside

    //loop for spaces b/w end of score and start of hiScore
    for(int i = 1; startSpaces+i < (bWidth-hiScoreLeng-11); i++)
    {
      printf(" ");
    }
    printf("HIGHSCORE: %d\n", hiScore);

    score = printBoard(spot,itemSpot,score,bWidth,bHeight);
    if (score == hiScore+100)
    {
      printf("NEW HIGH SCORE!!!\n\n");
    }
    if (score == hiScore + 100)
    {
      printf("Game Over! You win\n\nNew High Score:");
      printf(" %d\n", score);
      updateHiScore(score);
      printf("\nEnter key to exit\n");
      getchar();
      break;
    }
  }

  return 0;
}


int printBoard(int spot[], int itemSpot[], int score, int bWidth, int bHeight)
{

  if(spot[0] <= 0)
  {
    spot[0] = bHeight-1;
  }
  if (spot[0] == bHeight)
  {
    spot[0] = 1;
  }
  if(spot[1] <= 0)
  {
    spot[1] = bWidth-1;
  }
  if (spot[1] == bWidth)
  {
    spot[1] = 1;
  }
  for (int i = 0; i <= bHeight; i++)
  {
    if(i == 0 || i == bHeight)
    {
      for(int j = 0; j <= bWidth; j++)
      {
        printf("-");
      }
    }
    else
    {
      for(int j = 0; j<=bWidth; j++)
      {
        if(j == 0 || j  == bWidth)
        {
          printf("|");
        }
        else
        {
          if(spot[0]==itemSpot[0] && spot[1] == itemSpot[1])
          {
            printf("\a");
            score+=100;
            int randy = rand() % bWidth +1;
            int randy2 = rand() % bHeight +1;
            itemSpot[0]+=randy2;
            itemSpot[1]+=randy;
            if(itemSpot[0] >= bHeight)
            {
              itemSpot[0]-=bHeight-1;
            }
            if(itemSpot[1] >= bWidth)
            {
              itemSpot[1]-=bWidth-1;
            }
          }
          if(i == spot[0] && j == spot[1])
          {
            printf("\033[1;32m");
            printf("*");
            printf("\033[0m");
            continue;
          }
          if(i == itemSpot[0] && j == itemSpot[1])
          {
            printf("O");
          }
          else
          {
            printf(" ");
          }
        }
      }
    }
    printf("\n");
  }
  return score;
  // loop below just makes asterisk keep moving left to right, top to bottom
  /*spot[1]++;
  if(spot[1] == bWidth)
  {
    spot[1] = 1;
    spot[0]++;
  }
  if(spot[0] == bHeight)
  {
    spot[0] = 1;
  }
  printf("%d & %d\n", spot[0], spot[1]);*/
}

int checkScore()
{
  FILE *ptr;
  ptr = fopen("hiScore.txt", "r");
  int hiScore = 0;
  if( ptr == NULL)
  {
    return hiScore;
  }

  fscanf(ptr, "%d", &hiScore);
  fclose(ptr);
  return hiScore;
}

void updateHiScore(int score)
{
  FILE *ptr; 
  ptr = fopen("hiScore.txt", "w");
  fprintf(ptr, "%d", score);

  fclose(ptr);
}
